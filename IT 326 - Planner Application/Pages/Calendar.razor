@page "/"
@using Radzen
@using IT_326___Planner_Application.Models
@using IT_326___Planner_Application.Pages
@inject Radzen.DialogService DialogService


@if (!MainLayout.isDarkMode()) {
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
}
else {
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/dark.css">
}
<PageTitle>Calendar</PageTitle>
<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender Data="@eventList" style="height: 70vh; width: 70vw; margin: 0; padding: 0;" TItem="Event" 
        StartProperty="Start" EndProperty="End" TextProperty="Text" SelectedIndex="0" SlotSelect=@OnSlotSelect 
        AppointmentSelect=@OnEventSelect AppointmentRender=@OnEventRender>
    <RadzenMonthView />
    <RadzenWeekView />
    <RadzenDayView />
</RadzenScheduler>
@code {
    //Calendar Class

    //Create instance of scheduler object to reload calendar view when changes are made
    private RadzenScheduler<Event>? scheduler = new RadzenScheduler<Event> { };

    //ArrayList to hold all event objects
    //Currently has some pre-made test event objects
    public static IList<Event> eventList = new List<Event> {
      new Event
      {
        Start = DateTime.Today.AddDays(2).AddHours(5),
        End = DateTime.Today.AddDays(2).AddHours(8),
        Text = "Hang out with Prof. Saripalle",
      },
      new Event
      {
        Start = DateTime.Today.AddDays(7),
        End = DateTime.Today.AddDays(8),
        Text = "Birthday"
      },
      new Course {
        Start = DateTime.Today.AddHours(12),
        End = DateTime.Today.AddHours(14),
        Text = "Chemistry",
        Color = "green",
        Teacher = "Rishi Saripalle"
      },
      new Course {
        Start = DateTime.Today.AddHours(10),
        End = DateTime.Today.AddHours(11),
        Text = "Math",
        Color = "blue",
        Teacher = "Trevor Murphy"
      },
      new Course {
        Start = DateTime.Today.AddHours(15),
        End = DateTime.Today.AddHours(16),
        Text = "History",
        Color = "orange",
        Teacher = "Max Glover"
      },
      new Course {
        Start = DateTime.Today.AddHours(18),
        End = DateTime.Today.AddHours(21),
        Text = "English",
        Color = "red",
        Teacher = "David Salegna"
      },
      new Event
      {
        Start = DateTime.Today.AddDays(5).AddHours(13),
        End = DateTime.Today.AddDays(5).AddHours(16),
        Text = "Soul Search",
      },
      new Event
      {
        Start = DateTime.Today.AddDays(13),
        End = DateTime.Today.AddDays(15),
        Text = "Evade Taxes",
      },
      new Event
      {
        Start = DateTime.Today.AddDays(10).AddHours(15),
        End = DateTime.Today.AddDays(10).AddHours(17),
        Text = "Find the Meaning of Life",
      },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async void OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        // Refer to CreateEvent.razor to create new Event object and set parameters, when done return to this method
        var data = await DialogService.OpenAsync<CreateEvent>("Add Event", new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        // Add new event to the eventList
        if (data != null && scheduler != null)
        {
            eventList.Add(data);
            await scheduler!.Reload();
        }
    }

    async Task OnEventSelect(SchedulerAppointmentSelectEventArgs<Event> args)
    {
        // Refer to EditEvent.razor to edit the clicked on event
        if (args.Data.GetType() == typeof(Event)) {
            await DialogService.OpenAsync<EditEvent>("Edit Event", new Dictionary<string, object> { { "Event", args.Data } });
               if (scheduler != null) {
                  await scheduler.Reload();
               }
        }
        else if (args.Data.GetType() == typeof(Course)) {
            await DialogService.OpenAsync<EditCourse>("Edit Course", new Dictionary<string, object> { { "Course", (Course)args.Data } });
            if (scheduler != null)
            {
                await scheduler.Reload();
            }
        }
        

    }

    void OnEventRender(SchedulerAppointmentRenderEventArgs<Event> args)
    {
        //Change event background to be what was set in the event data
        args.Attributes["style"] = "background: " + args.Data.Color;
    }

    public static IList<Course> getCourseList() {
        IList<Course> courseList = new List<Course> { };
        foreach (var i in eventList) {
            if (i.GetType() == typeof(Course)) {
                courseList.Add((Course)i);
            }
        }
       return courseList;
    }
}