@page "/"
@using Radzen
@using IT_326___Planner_Application.Models
@inject Radzen.DialogService DialogService

@if (!MainLayout.isDarkMode()) {
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
}
else {
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/dark.css">
}
<RadzenScheduler Data="@data" style="height: 70vh; width: 70vw; margin: 0; padding: 0;" TItem="Event" StartProperty="Start" EndProperty="End"
                 TextProperty="Text" SelectedIndex="0" SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenMonthView />
    <RadzenWeekView />
    <RadzenDayView />
</RadzenScheduler>
@code {
    //RadzenScheduler<Event> scheduler;

    Event[] data = new Event[]
    {
      new Event
      {
        Start = DateTime.Today,
        End = DateTime.Today.AddDays(1),
        Text = "Placeholder Event"
      },
      new Event
      {
        Start = DateTime.Today,
        End = DateTime.Today.AddDays(1),
        Text = "Birthday"
      },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    void OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        //console.Log($"SlotSelect: Start={args.Start} End={args.End}");

        //Event data = await DialogService.OpenAsync<AddEvent>("Add Appointment", new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        //if (data != null)
        //{
        //    data.Add(data);
        //    // Either call the Reload method or reassign the Data property of the Scheduler
        //    await scheduler.Reload();
        //}
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Event> args)
    {
        //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        await DialogService.OpenAsync<EditEvent>("Edit Event", new Dictionary<string, object> { { "Event", args.Data } });

        //await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Event> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }
}